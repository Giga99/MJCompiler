// IMPORT SECTION -------------------------------------------------------------------------------------------------



package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



// CODE SECTION ---------------------------------------------------------------------------------------------------



parser code {:
	Logger log = Logger.getLogger(getClass());
	
	boolean errorDetected;
   
    // Redefined error handling methods
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
      errorDetected = true;
    }
  
    public void syntax_error(String message, Symbol cur_token) {
        report_error("\nSyntax error: " + message, cur_token);
        errorDetected = true;
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing can't be continued", cur_token);
        errorDetected = true;
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
        errorDetected = true;
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



// TERMINALS ------------------------------------------------------------------------------------------------------


  
// KEYWORDS
terminal PROG, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, MAP;

// OPERATORS
terminal PLUS, MINUS, MUL, DIV, MOD, EQUALS, NOTEQUALS, GREATER, GREATEREQUALS, LESS, LESSEQUALS, AND, OR, ASSIGN;
terminal INC, DEC, SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE, ARROW;

// TOKEN TYPES
terminal String BOOL;
terminal Character CHAR;
terminal Integer NUMBER;
terminal String IDENT;



// NONTERMINALS ---------------------------------------------------------------------------------------------------



nonterminal ProgramDeclList, ConstDecl, ConstDeclList, ConstDeclListItem;
nonterminal MethodDeclList, MethodDecl, MethodReturnType, FormPars, FormParmsList, FormParam, FormParamDeclaration;
nonterminal VarDeclList, VarDecl, VarDeclIdentList, VarDeclaration;
nonterminal StatementList, Statement, PrintNumOptional, MethodNameCall, ActPars;
nonterminal StatementIfStart, StatementIfConditionEnd, StatementIfEnd, StatementWhileHead, StatementWhileStart, StatementMapHead, ConditionOrBlock;
nonterminal DesignatorStatement, DesignatorStatementAssignExpr;
nonterminal Assignop, Relop, Addop, Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, ConstValue, Designator, StatementMapIdent, MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, TermList, Term, Factor, IfCondition, Condition, CondTerm, CondFact;



// PRECEDENCE -----------------------------------------------------------------------------------------------------



precedence left ELSE;



// SYNTAX ---------------------------------------------------------------------------------------------------------



Program ::= (Program) PROG ProgName ProgramDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;



/* Rule for the list of global program variables example:	program Program3 int a; const int b = 5; {} */

ProgramDeclList ::= (ProgramConstDeclList) ProgramDeclList ConstDecl
					|
					(ProgramVarDecList) ProgramDeclList VarDecl
					|
					(ProgramEmptyDeclList) /* epsilon */
					;
					
					

/* Rules for the const declaration */

ConstDecl ::= (ConstDecl) CONST Type ConstDeclList SEMI;

ConstDeclList ::= (ConstDeclListMultipleItems) ConstDeclList COMMA ConstDeclListItem
				| 
				(ConstDeclListSingleItem) ConstDeclListItem
				;
				
ConstDeclListItem ::= (ConstDeclListItem) IDENT:constName ASSIGN ConstValue;

ConstValue ::= (ConstValueNumber) NUMBER:value
			|
			(ConstValueChar) CHAR:value
			|
			(ConstValueBool) BOOL:value
			;
			
			
			
/* Rules for the method declaration */
				
MethodDeclList ::= (MethodDeclItemsList) MethodDeclList MethodDecl
				|
				(MethodDeclEmptyList) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodReturnType MethodName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodName ::= (MethodName) IDENT:methodName;

MethodReturnType ::= (MethodAnyReturnType) Type:returnType
					|
					(MethodVoidReturnType) VOID
					;
					
					
					
/* Rules for the formal parameters */
					
FormPars ::= (FormParsItemsList) FormParmsList
				|
				(FormParsEmptyList) /* epsilon */
				;
				
FormParmsList ::= (FormParmsListMultipleItems) FormParmsList COMMA FormParam
				|
				(FormParmsListSingleItem) FormParam
				;

FormParam ::= (FormParamSuccess) Type FormParamDeclaration
			|
			(FormParamError) error:e
			{: parser.report_error("Formal param declaration error at line: " + eleft + ". Successfully recovered from the error.", null); :}
			;

FormParamDeclaration ::= (FormParamDeclarationVar) IDENT:varName
						|
						(FormParamDeclarationArray) IDENT:arrayName LSQUARE RSQUARE
						|
						(FormParamDeclarationMatrix) IDENT:matrixName LSQUARE RSQUARE LSQUARE RSQUARE
						;
			
		
		
/* Rules for the variable declaration */

VarDeclList ::= (VarDeclListItems) VarDeclList VarDecl
				|
				(VarDeclListEmpty) /* epsilon */
				;
			
VarDecl ::= (VarDecl) Type VarDeclIdentList SEMI;

VarDeclIdentList ::= (VarDeclIdentListMultipleItems) VarDeclIdentList COMMA VarDeclaration
			|
			(VarDeclIdentListSingleItem) VarDeclaration
			;
			
VarDeclaration ::= (DefaultVar) IDENT:varName
				|
				(ArrayVar) IDENT:arrayName LSQUARE RSQUARE
				|
				(MatrixVar) IDENT:matrixName LSQUARE RSQUARE LSQUARE RSQUARE
				|
				(VarDeclIdentListError) error:e
				{: parser.report_error("Global var declaration error at line: " + eleft + ". Successfully recovered from the error.", null); :}
				;



/* Rules for the methods body */

StatementList ::= (StatementsItemsList) StatementList Statement
				|
				(StatementsEmptyList) /* epsilon */
				;
				
Statement ::= (StatementRead) READ LPAREN Designator RPAREN SEMI /* Rule for the read */
				|
				(StatementPrint) PRINT LPAREN Expr PrintNumOptional RPAREN SEMI /* Rule for the print */
				|
				(StatementDesignator) DesignatorStatement SEMI /* Rule for the various statements like assignements, inc, dec, method call and so on */
				|
				(StatementBreak) BREAK SEMI /* Rule for the break */
				|
				(StatementContinue) CONTINUE SEMI /* Rule for the continue */
				|
				(StatementEmptyReturn) RETURN SEMI /* Rule for the return void */
				|
				(StatementValueReturn) RETURN Expr SEMI /* Rule for the return expression */
				|
				(StatementBrackets) LBRACE StatementList RBRACE /* Rule for the statement section */
				|
				(StatementIf) StatementIfStart IfCondition StatementIfConditionEnd Statement StatementIfEnd /* Rule for the if */
				|
				(StatementIfElse) StatementIfStart IfCondition StatementIfConditionEnd Statement StatementIfEnd ELSE Statement /* Rule for the if else */
				|
				(StatementWhile) StatementWhileHead Statement /* Rule for the while */
				|
				(StatementMap) StatementMapHead ARROW Expr RPAREN SEMI /* Rule for the map */
				;
				
PrintNumOptional ::= (PrintNumConst) COMMA NUMBER
					|
					(PrintNumNoConst) /* epsilon */
					;

StatementIfStart ::= (StatementIfStart) IF LPAREN;

StatementIfConditionEnd ::= (StatementIfConditionEnd) RPAREN;

StatementIfEnd ::= (StatementIfEnd) /* epsilon */;
						
StatementWhileHead ::= (StatementWhileHead) StatementWhileStart LPAREN Condition RPAREN;

StatementWhileStart ::= (StatementWhileStart) WHILE;

StatementMapHead ::= (StatementMapHead) Designator Assignop Designator DOT MAP LPAREN StatementMapIdent;

StatementMapIdent ::= (StatementMapIdent) IDENT:mapVariableName;
					
					
					
/* Rules for the conditions */

IfCondition ::= (ConditionSuccess) Condition
			|
			(ConditionError) error:e
			{: parser.report_error("Condition error at line: " + eleft + ". Successfully recovered from the error.", null); :}
			;

Condition ::= (ConditionList) Condition ConditionOrBlock CondTerm
			|
			(ConditionSingleItem) CondTerm
			;
			
ConditionOrBlock ::= (ConditionOrBlock) OR;
			
CondTerm ::= (CondTermList) CondTerm AND CondFact
			|
			(CondTermSingleItem) CondFact
			;
			
CondFact ::= (CondFactDoubleExpr) Expr Relop Expr
			|
			(CondFactSingleExpr) Expr
			;
				
				
				
DesignatorStatement ::= (DesignatorStatementAssign) DesignatorStatementAssignExpr /* Rule for assigning the value */
						|
						(DesignatorStatementInc) Designator INC /* Rule for incrementing variable, example a++ */
						|
						(DesignatorStatementDec) Designator DEC /* Rule for decrementing variable, example a-- */
						|
						(DesignatorStatementMethodCall) MethodNameCall LPAREN RPAREN /* Rule for the method call without actual params */
						|
						(DesignatorStatementMethodCallWithActParams) MethodNameCall LPAREN ActPars RPAREN /* Rule for the method call with actual params */
						;
					
DesignatorStatementAssignExpr ::= (DesignatorStatementAssignExprSuccess) Designator Assignop Expr
								|
								(DesignatorStatementAssignExprError) error:e
								{: parser.report_error("Designator assign operation error at line: " + eleft + ". Successfully recovered from the error.", null); :}
								;
				
				
				
/* Rules for the expressions */
				
Expr ::= (ExprPositiveFirstTerm) TermList
		|
		(ExprNegativeFirstTerm) MINUS TermList
		;

TermList ::= (TermListSingle) Term
			|
			(TermListMultiple) Term Addop TermList /* Rule for the additions and subtractions */
			;

Term ::= (TermSingleFactor) Factor
		|
		(TermMultipleFactor) Term Mulop Factor /* Rule for the mul, div and mod operations */
		;
		
		
		
/* Rules for the factor in expressions */
		
Factor ::= (FactorNumber) NUMBER
		|
		(FactorChar) CHAR
		|
		(FactorBool) BOOL
		|
		(FactorExpr) LPAREN Expr RPAREN /* Rule for the expression inside parentheses, example: (4 + 5 * 3) */
		|
		(FactorArray) NEW Type LSQUARE Expr RSQUARE /* Rule for the array factor */
		|
		(FactorMatrix) NEW Type LSQUARE Expr RSQUARE LSQUARE Expr RSQUARE /* Rule for the matrix factor */
		|
		(FactorDesignator) Designator
		|
		(FactorMethodCall) MethodNameCall LPAREN RPAREN /* Rule for the method call without actual params */
		|
		(FactorMethodCallWithActParams) MethodNameCall LPAREN ActPars RPAREN /* Rule for the method call with actual params */
		;
		
		
		
/* Rules for the actual parameters */

MethodNameCall ::= (MethodNameCall) Designator;
		
ActPars ::= (ActParamsMultiple) ActPars COMMA Expr
			|
			(ActParamsSingle) Expr
			;



/* Rules for using variable or accessing element in the array or accessing element in the matrix */

Designator ::= (DesignatorIdent) IDENT:designatorName
			|
			(DesignatorArray) IDENT:designatorName LSQUARE Expr RSQUARE
			|
			(DesignatorMatrix) IDENT:designatorName LSQUARE Expr RSQUARE LSQUARE Expr RSQUARE
			;

		
		
/* Rules for the commonly used things */

Type ::= (Type) IDENT:typeName;

Assignop ::= (Assign) ASSIGN;

Relop ::= (Equals) EQUALS
		|
		(NotEquals) NOTEQUALS
		|
		(Greater) GREATER
		|
		(GreaterEquals) GREATEREQUALS
		|
		(Less) LESS
		|
		(LessEquals) LESSEQUALS
		;

Addop ::= (Plus) PLUS
		|
		(Minus) MINUS
		;
		
Mulop ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;


